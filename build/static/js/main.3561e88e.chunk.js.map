{"version":3,"sources":["components/Card/bg1.jpg","components/Card/user.svg","components/Card/kitchen-tools.svg","App.styles.ts","components/Card/Card.styles.tsx","components/SelectionSquare/SelectionSquare.styles.ts","components/SelectionSquare/SelectionSquare.tsx","components/CoolButton/CoolButton.styles.ts","components/CoolButton/CoolButton.tsx","components/Card/Card.tsx","graphql/queries.tsx","views/Home/Home.tsx","App.tsx","graphql/ApolloProvider.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AppStyles","black","white","grey","grey2","green","red","mobile","window","innerWidth","size","colour","this","align","thick","fontSize","textAlign","color","fontWeight","direction","justify","wrap","display","alignItems","justifyContent","flexWrap","flexDirection","minHeight","width","backgroundColor","CardStyles","maxWidth","margin","borderRadius","container","height","SelectionSquareStyles","selected","sizeReference","text","CoolButton","children","CSS","SelectionSquare","Factory","style","CoolButtonStyles","border","onClick","coolButton","type","Card","useState","people","setPeople","week","setWeek","Picture","src","food","alt","maxHeight","CardContent","CardContentC13","CardContentC2","id","tx1","tx2","pic","user","enum","kitchen","map","obj","i","key","CardContentC2inner","el","price","sub","LIST_PLANS","gql","SUBSCRIBE_TO_PLAN","toast","configure","Home","factory","useQuery","loading","error","data","useMutation","subscribe","plans","listPlans","handleSub","input","a","variables","errors","warn","autoClose","success","page","plan","App","exact","path","component","httpLink","createHttpLink","uri","client","ApolloClient","link","cache","InMemoryCache","Boolean","location","hostname","match","ReactDOM","render","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3561e88e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg1.df9b7468.jpg\";","module.exports = __webpack_public_path__ + \"static/media/user.c32d5bb6.svg\";","module.exports = __webpack_public_path__ + \"static/media/kitchen-tools.48df46fc.svg\";","export default class AppStyles {\n\n  public black:string = 'black';\n  public white:string = 'white'; \n  public grey:string = '#efefef';\n  public grey2:string = 'grey'\n  public green:string = 'green';\n  public red:string = 'red';\n  public mobile:boolean = window.innerWidth < 1045\n\n  public text(size:number=1, colour:string=this.black, align:string=\"center\", thick:string=\"normal\"):Object{\n    return ({\n      fontSize:`${size*12}px`,\n      textAlign: align,\n      color: colour,\n      fontWeight: thick\n    })\n  }\n\n  public container(direction:string = 'row',justify='center',wrap='wrap'):Object {\n    return ({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: justify,\n      flexWrap: wrap,\n      flexDirection: direction\n    })\n  }\n\n  public page():Object {\n    return ({\n      minHeight: '100vh',\n      width: '100vw',\n      backgroundColor: this.grey\n    })\n  }\n\n  static factory(): AppStyles {\n    return new AppStyles();\n  }\n}\n","import AppStyles from \"../../App.styles\";\n\nexport default class CardStyles extends AppStyles {\n  public Card(sizeReference: number = 2): Object {\n    return {\n      maxWidth: this.mobile && \"500px\",\n      margin: \"30px\",\n      backgroundColor: this.white,\n      borderRadius: 12,\n      ...this.container(this.mobile ? \"column\" : \"row\"),\n    };\n  }\n\n  public Picture(): Object {\n    return {\n      width: this.mobile ? \"100%\" : \"400px\",\n      height: !this.mobile && \"450px\",\n    };\n  }\n\n  public CardContent(): Object {\n    return {\n      ...this.container(\"column\"),\n      width: !this.mobile ? \"585px\" : \"100%\",\n    };\n  }\n\n  public CardContentC13(): Object {\n    return {\n      ...this.container(\"column\"),\n      margin: \"20px 0\",\n      width: this.mobile ? \"90%\" : \"550px\",\n    };\n  }\n\n  public CardContentC2(): Object {\n    return {\n      margin: \"10px 0\",\n      backgroundColor: this.grey,\n      borderRadius: 12.5,\n      width: this.mobile ? \"90%\" : \"550px\",\n      height: !this.mobile && \"200px\",\n\n      ...this.container(this.mobile ? \"column\" : \"row\", \"space-around\"),\n    };\n  }\n\n  public CardContentC2inner(): Object {\n    return {\n      margin: \"10px\",\n      ...this.container(\"column\"),\n      width: !this.mobile && \"45%\",\n    };\n  }\n\n  static Factory(): CardStyles {\n    return new CardStyles();\n  }\n}\n","import AppStyles from '../../App.styles';\n\nexport default class SelectionSquareStyles extends AppStyles {\n  \n\n\n    public SelectionSquare(selected:boolean, sizeReference:number=2):Object {\n      return ({\n\n        borderRadius: 6.25 * sizeReference,\n        width: 25 * sizeReference,\n        height: 25 * sizeReference,\n        backgroundColor: selected ? this.green : this.white ,\n        ...this.text(sizeReference,selected ? this.white : this.grey2),\n        ...this.container()\n      })\n    };\n  \n\n  static Factory(): SelectionSquareStyles {\n    return new SelectionSquareStyles();\n  }\n}\n","import React from \"react\";\nimport SelectionSquare from \"./SelectionSquare.styles\";\n\ninterface SelectionSquareProps {\n  children: any;\n  selected?: boolean;\n}\n\nconst CoolButton: React.FC<SelectionSquareProps> = ({\n  children = \"test\",\n  selected = false,\n}: SelectionSquareProps) => {\n  const CSS = SelectionSquare.Factory();\n\n  return (\n    <>\n      <div style={CSS.SelectionSquare(selected)}>{children}</div>\n    </>\n  );\n};\n\nexport default CoolButton;\n","import AppStyles from '../../App.styles';\n\nexport default class CoolButtonStyles extends AppStyles {\n  \n\n\n    public coolButton():Object {\n      return ({\n\n        borderRadius: 25,\n        width: this.mobile ? '80%' : '300px',\n        height: '40px',\n        backgroundColor: this.green,\n        ...this.text(1.5,this.white),\n        ...this.container(), \n        border: 'none'\n      })\n    };\n  \n\n  static Factory(): CoolButtonStyles {\n    return new CoolButtonStyles();\n  }\n}\n","import React from \"react\";\nimport CoolButtonStyles from \"./CoolButton.styles\";\n\ninterface CoolButtonProps {\n  children: any;\n  onClick?: (event:any) => any;\n}\n\nconst CoolButton: React.FC<CoolButtonProps> = ({\n  children,\n  onClick,\n}: CoolButtonProps) => {\n  const CSS = CoolButtonStyles.Factory();\n\n  return (\n    <>\n      <button style={CSS.coolButton()} type=\"button\" onClick={onClick}>\n        {children}\n      </button>\n    </>\n  );\n};\n\nexport default CoolButton;\n","import React, { useState } from \"react\";\nimport CardStyles from \"./Card.styles\";\nimport food from \"./bg1.jpg\";\nimport user from \"./user.svg\";\nimport kitchen from \"./kitchen-tools.svg\";\nimport SelectionSquare from \"../SelectionSquare/SelectionSquare\";\nimport CoolButton from \"../CoolButton/CoolButton\";\n\ninterface CardProps {\n  children: any;\n}\n\nconst Card: React.FC<CardProps> = ({ children }: CardProps) => {\n  const CSS = CardStyles.Factory();\n  const [people, setPeople] = useState(1);\n  const [week, setWeek] = useState(1);\n\n  const price = (input:string) => +input * people * week;\n  return (\n    <>\n      <div style={CSS.Card()}>\n        <div style={CSS.Picture()}>\n          <img\n            src={food}\n            alt=\"food\"\n            style={{ maxHeight: \"100%\", maxWidth: \"100%\", borderRadius: 12 }}\n          />\n        </div>\n\n        <div style={CSS.CardContent()}>\n          <div style={CSS.CardContentC13()}>\n            <div style={CSS.text(1.75, CSS.black, \"center\", \"bold\")}>\n              Gostou e ainda não é assinante?\n            </div>\n            <div style={CSS.text(1.75, CSS.black, \"center\", \"bold\")}>\n              Escolha já um plano semanal!\n            </div>\n          </div>\n\n          <div style={CSS.CardContentC2()}>\n            {[\n              {\n                id: \"pp\",\n                tx1: \"Receita para\",\n                tx2: \"quantas pessoas?\",\n                pic: user,\n                enum: [1, 2],\n              },\n              {\n                id: \"wk\",\n                tx1: \"Quantas receitas\",\n                tx2: \"por semana??\",\n                pic: kitchen,\n                enum: [1, 2, 3],\n              },\n            ].map((obj, i) => (\n              <div key={i} style={CSS.CardContentC2inner()}>\n                <div style={CSS.container()}>\n                  <div style={{ margin: \"10px\" }}>\n                    <img src={obj.pic} alt={obj.pic + \"\"} height=\"30px\" />\n                  </div>\n                  <div>\n                    <div style={CSS.text(1, CSS.green, \"start\")}>{obj.tx1}</div>\n                    <div style={CSS.text(1, CSS.green, \"start\")}>{obj.tx2}</div>\n                  </div>\n                </div>\n\n                <div style={CSS.container()}>\n                  {obj.enum.map((el, i) => (\n                    <div\n                      key={i}\n                      style={{ margin: \"15px 5px\" }}\n                      onClick={() => {\n                        obj.id === \"pp\" && setPeople(el);\n                        obj.id === \"wk\" && setWeek(el);\n                      }}\n                    >\n                      {(obj.id === \"pp\" && people === el) ||\n                      (obj.id === \"wk\" && week === el) ? (\n                        <SelectionSquare selected>{el}</SelectionSquare>\n                      ) : (\n                        <SelectionSquare>{el}</SelectionSquare>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div style={CSS.CardContentC13()}>\n            <div\n              style={{\n                ...CSS.container(\"row\", CSS.mobile ? \"center\" : \"start\"),\n                width: \"100%\",\n              }}\n            >\n              <div style={CSS.text(1, CSS.grey2)}>PREÇO DO KIT POR MES</div>\n            </div>\n\n            <div\n              style={{\n                ...CSS.container(\n                  CSS.mobile ? \"column\" : \"row\",\n                  \"space-between\"\n                ),\n                width: \"100%\",\n              }}\n            >\n              <div style={{ margin: \"10px\" }}>\n                <span style={CSS.text(1, CSS.red)}>RS </span>\n                <span style={{ ...CSS.text(3, CSS.red), height: \"40px\" }}>\n                  {price(children.price)}\n                </span>\n              </div>\n\n              <div\n                style={{ width: CSS.mobile ? \"100%\" : \"\", ...CSS.container() }}\n              >\n                <CoolButton onClick={children.sub}>\n                  {`${CSS.mobile ? \"A\" : \"Quero a\"}ssinar agora!`}\n                </CoolButton>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Card;\n","import gql from \"graphql-tag\";\n\nexport const LIST_PLANS = gql`\n  query {\n    listPlans {\n      id\n      price \n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_PLAN = gql`\n  mutation SubscribeToPlan($id: Int!) {\n    subscribeToPlan(id: $id) {\n      id\n    }\n  }\n`;\n","import React from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport AppStyles from \"../../App.styles\";\nimport Card from \"../../components/Card/Card\";\nimport { LIST_PLANS, SUBSCRIBE_TO_PLAN } from \"../../graphql/queries\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\ntoast.configure();\n\nconst Home: React.FC = () => {\n  const CSS = AppStyles.factory();\n\n  const { loading, error, data } = useQuery(LIST_PLANS);\n  const [subscribe] = useMutation(SUBSCRIBE_TO_PLAN);\n  const plans = data?.listPlans;\n\n  const handleSub = async (input: any) => {\n    const res = await subscribe({ variables: { id: input } });\n    if (res.errors) {\n      toast.warn(\"Error1\", { autoClose: 2000 });\n    } else {\n      toast.success(\"Success!\", { autoClose: 2000 });\n    }\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error</p>;\n\n  return (\n    <div\n      style={\n        { ...CSS.page(), ...CSS.container(\"column\") } as React.CSSProperties\n      }\n    >\n      <div\n        style={{\n          ...CSS.text(2, CSS.black, \"center\", \"bold\"),\n          maxWidth: \"360px\",\n          margin: \"20px 0 0 0\",\n        }}\n      >\n        Configure o plano que melhor encaixa na sua rotina.\n      </div>\n\n      {plans?.map((plan: any, i: any) => (\n        <div key={i}>\n          <Card>\n            {{\n              price: plan.price,\n              sub: () => handleSub(plan.id),\n            }}\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\";\nimport Home from \"./views/Home/Home\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport App from \"../App\";\nimport { InMemoryCache, ApolloClient, createHttpLink} from \"@apollo/client\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://frontend-challenge.jungsoft.io/graphiql\",\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache(),\n});\n\nexport default (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport ApolloProvider from \"./graphql/ApolloProvider\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(ApolloProvider, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}